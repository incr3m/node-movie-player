{
  "_args": [
    [
      {
        "raw": "to-utf-8@^1.2.0",
        "scope": null,
        "escapedName": "to-utf-8",
        "name": "to-utf-8",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/media/incrm/00758a70-9365-4b7e-b0a0-2c1c96ea68df/movieserver/node_modules/srt-to-vtt"
    ]
  ],
  "_from": "to-utf-8@>=1.2.0 <2.0.0",
  "_id": "to-utf-8@1.3.0",
  "_inCache": true,
  "_location": "/to-utf-8",
  "_nodeVersion": "7.1.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/to-utf-8-1.3.0.tgz_1480230679766_0.30634724674746394"
  },
  "_npmUser": {
    "name": "finnpauls",
    "email": "derfinn@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "to-utf-8@^1.2.0",
    "scope": null,
    "escapedName": "to-utf-8",
    "name": "to-utf-8",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/srt-to-vtt"
  ],
  "_resolved": "https://registry.npmjs.org/to-utf-8/-/to-utf-8-1.3.0.tgz",
  "_shasum": "b2af7be9e003f4c3817cc116d3baed2a054993c9",
  "_shrinkwrap": null,
  "_spec": "to-utf-8@^1.2.0",
  "_where": "/media/incrm/00758a70-9365-4b7e-b0a0-2c1c96ea68df/movieserver/node_modules/srt-to-vtt",
  "author": {
    "name": "Finn Pauls"
  },
  "bin": {
    "to-utf-8": "./cli.js"
  },
  "bugs": {
    "url": "https://github.com/finnp/to-utf-8/issues"
  },
  "dependencies": {
    "charset-detector": "0.0.2",
    "iconv-lite": "^0.4.4",
    "minimist": "^1.1.0",
    "peek-stream": "^1.1.1",
    "stream-splicer": "^1.3.1"
  },
  "description": "Detect input encoding and convert to utf-8 if needed",
  "devDependencies": {
    "standard": "6.0.8"
  },
  "directories": {},
  "dist": {
    "shasum": "b2af7be9e003f4c3817cc116d3baed2a054993c9",
    "tarball": "https://registry.npmjs.org/to-utf-8/-/to-utf-8-1.3.0.tgz"
  },
  "gitHead": "ff48afddf0de284de709c80e0f379457e853434b",
  "homepage": "https://github.com/finnp/to-utf-8",
  "keywords": [
    "utf8",
    "encoding",
    "detection"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "finnpauls",
      "email": "derfinn@gmail.com"
    }
  ],
  "name": "to-utf-8",
  "optionalDependencies": {},
  "readme": "# to-utf-8\n\nInstall with `npm install to-utf-8` and optionally use the `-g` flag to install the\ncommand line utility.\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n## Usage\n```js\nvar utf8 = require('to-utf-8')\nvar fs = require('fs')\n\nfs.createReadStream('weirdencoding.txt')\n  .pipe(utf8())\n  .pipe('utf8encoded.txt')\n```\n\nYou can also provide the encoding, if known:\n\n```js\nvar utf8 = require('to-utf-8')\nvar fs = require('fs')\n\nfs.createReadStream('utf16-le-file.txt')\n  .pipe(utf8('utf16-le'))\n  .pipe('utf8encoded.txt')\n```\n\nYou can also pass an options object instead with the following keys:\n* `confidence` Minimum confidence for the detected source encoding. If not reached assume `utf-8`\n* `encoding` Same as passing a string directly. Use the given encoding instead of detecting it.\n* `newline` Use input text until newline is reached to detect encoding (default `true`)\n* `detectSize` Maximum size from input to detect encoding (default `65535`)\n\n## CLI\n\nThis modules includes a `to-utf-8` command line tool. It listens for a stream from\nstdin and converts it to utf-8 to stdout like:\n\n```\nto-utf-8 < weirdencoding.txt > utf8encoded.txt\n```\n\nYou can specify the source encoding with the `--enc` flag.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/finnp/to-utf-8.git"
  },
  "scripts": {
    "pretest": "standard",
    "test": "node test.js",
    "test-cli": "./cli.js < node_modules/charset-detector/tests/fixtures/utf-16le.txt"
  },
  "version": "1.3.0"
}
